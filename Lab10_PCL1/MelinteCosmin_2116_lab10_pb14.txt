#define _CRT__SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define DIM 255

int comparaInt(const void* a, const void* b);
int comparaFloat(const void* a, const void* b);

void main()
{
	int n, x[DIM], *px = x;
	float y[DIM], *py = y;

	printf("\n Introduceti dimensiunea vectorului (int): ");
	scanf_s("%d", &n);
	if (n > DIM)
		printf("\n Dimensiune depasita!\n\n");
	else
	{
		printf("\n Introduceti elementele vectorului:\n");
		for (int i = 0; i < n; i++)
		{
			printf("\tElementul %d: ", i + 1);
			scanf_s("%d", (px + i));
		}
		qsort((void*)px, (size_t)n, sizeof(int), comparaInt);
		printf("\n Vectorul ordonat crescator este: \n\n\t");
		for (int i = 0; i < n; i++)
			printf("%d ", *(px + i));

		printf("\n ------------------------------------------------\n");

		printf("\n\n Introduceti dimensiunea vectorului (float): ");
		scanf_s("%d", &n);
		printf("\n Introduceti elementele vectorului:\n");
		for (int i = 0; i < n; i++)
		{
			printf("\tElementul %d: ", i + 1);
			scanf_s("%f", (py + i));
		}
		qsort((void*)py, (size_t)n, sizeof(float), comparaFloat);
		printf("\n Vectorul ordonat descrescator este: \n\n\t");
		for (int i = 0; i < n; i++)
			printf("%.2f ", *(py + i));
	}
	printf("\n\n");
}

int comparaInt(const void* a, const void* b)
{
	return (*(int*)a) - (*(int*)b);
}

int comparaFloat(const void* a, const void* b)
{
	float r = (*(float*)a) - (*(float*)b);
	if (r > 0)
		return -1;
	else
		if (r == 0)
			return 0;
		else
			return 1;
}